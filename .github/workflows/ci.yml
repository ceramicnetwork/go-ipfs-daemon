# TODO: Remove ECR and build event steps once the new CD flow is fully implemented
name: Dagger CI Workflow

on:
  push:
    branches: [ develop, release-candidate, main ]
  pull_request: # pull requests
  workflow_dispatch: # manually triggered

env:
  # Dagger
  DAGGER_PLAN: cue.mod/pkg/github.com/3box/pipeline-tools/ci/plans/ipfs.cue
  STATUS_PLAN: cue.mod/pkg/github.com/3box/pipeline-tools/ci/plans/status.cue
  DAGGER_LOG_FORMAT: "plain"
  PIPELINE_TOOLS_VER: "0.2.0"
  # Secrets
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  # Miscellaneous
  RUN_URL: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
  STATUS_URL: "https://api.github.com/repos/ceramicnetwork/go-ipfs-daemon/statuses/${{ github.sha }}"
  BRANCH: ${{ github.head_ref || github.ref_name }}
  SHA: ${{ github.sha }}

jobs:
  image:
    name: Verify and publish Docker image
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ env.BRANCH }}
      -
        name: Install Dagger
        uses: dagger/dagger-for-github@v3
        with:
          install-only: true
      -
        name: Setup Dagger
        run: |
          dagger project init
          dagger project update
          dagger project update "github.com/3box/pipeline-tools/ci@v${{ env.PIPELINE_TOOLS_VER }}"
      -
        name: Set commit status "pending"
        run: dagger do pending -p ${{ env.STATUS_PLAN }}
      -
        name: Set sha tag
        run: |
          SHA_TAG=$(echo ${{ env.SHA }} | head -c 12)
          echo "SHA_TAG=$SHA_TAG" >> $GITHUB_ENV
      -
        name: Set main branch tag
        if: ${{ env.BRANCH == 'main' }}
        run: |
          echo "ENV_TAG=prod" >> $GITHUB_ENV
          echo "UTILS_HANDLER_URL=${{ secrets.UTILS_HANDLER_URL_PROD }}" >> $GITHUB_ENV
      -
        name: Set rc branch tag
        if: ${{ env.BRANCH == 'release-candidate' }}
        run: |
          echo "ENV_TAG=tnet" >> $GITHUB_ENV
          echo "UTILS_HANDLER_URL=${{ secrets.UTILS_HANDLER_URL_TNET }}" >> $GITHUB_ENV
      -
        name: Set develop branch tag
        if: ${{ env.BRANCH == 'develop' || env.ENV_TAG == '' }}
        run: |
          echo "ENV_TAG=dev" >> $GITHUB_ENV
      -
        name: Verify Docker image
        run: dagger do verify -p ${{ env.DAGGER_PLAN }}
      -
        name: Push Docker image
        if: ${{ env.BRANCH == 'main' || env.BRANCH == 'release-candidate' || env.BRANCH == 'develop' }}
        run: dagger do push -w "actions:push:\"${{ env.AWS_REGION }}\":\"${{ env.ENV_TAG }}\":\"${{ env.BRANCH }}\":\"${{ env.SHA }}\":\"${{ env.SHA_TAG }}\":_" -p ${{ env.DAGGER_PLAN }}
      -
        # TODO: Enable this for all envs once Prod starts using CD manager.
        name: Create deployment job
        if: ${{ env.BRANCH == 'develop' || env.BRANCH == 'release-candidate' }}
        run: dagger do -l error deploy -w "actions:deploy:\"${{ env.AWS_REGION }}\":\"${{ env.ENV_TAG }}\":latest:\"${{ env.SHA_TAG }}\":_" -p ${{ env.DAGGER_PLAN }}
      -
        # TODO: Remove this and following step once Prods start using CD manager.
        name: Login to Amazon ECR
        id: login-ecr
        if: ${{ env.BRANCH == 'main' }}
        uses: aws-actions/amazon-ecr-login@v1
      -
        name: Publish build event
        if: ${{ env.BRANCH == 'main' }}
        run: |
          res=$(docker run --rm curlimages/curl curl -X POST ${{ env.UTILS_HANDLER_URL }}/github/event \
            -H "Content-Type: application/json" \
            --user ${{ env.AWS_ACCESS_KEY_ID }}:${{ env.AWS_SECRET_ACCESS_KEY }} \
            --aws-sigv4 "aws:amz:${{ env.AWS_REGION }}:execute-api" \
            -d '
              {
                "event_type": "new_ipfs_image",
                "client_payload":
                {
                  "env_tag": "${{ env.ENV_TAG }}",
                  "sha_tag": "${{ github.sha }}",
                  "ecr_repo": "${{ steps.login-ecr.outputs.registry }}",
                  "attempt": "${{ github.run_attempt }}",
                  "image_name": "go-ipfs-${{ env.ENV_TAG }}"
                }
              }
            ') || exit 1
          echo $res
          if [[ $res != *"Forwarded event"* ]]; then
            exit 1
          fi
      -
        name: Set commit status "success"
        run: dagger do success -p ${{ env.STATUS_PLAN }}
      -
        name: Set commit status "failure"
        if: ${{ failure() }}
        run: dagger do failure -p ${{ env.STATUS_PLAN }}
