name: Build, push, and publish Docker images

on:
  push:
    branches: [ develop, release-candidate, main ]
    paths-ignore:
      - '.github/**'
      - 'README.md'

  workflow_dispatch: # manually triggered

jobs:
  build_and_push:
    name: Build image and push to repositories
    runs-on: ubuntu-latest
    steps:
      -
        name: Check out the repo
        uses: actions/checkout@v2
      -
        name: Set branch name
        run: echo "BRANCH=${GITHUB_REF##*/}" >> $GITHUB_ENV
      -
        name: Set main branch tag
        if: ${{ env.BRANCH == 'main' }}
        run: |
          echo "ENV_TAG=prod" >> $GITHUB_ENV
          echo "UTILS_HANDLER_URL=${{ secrets.UTILS_HANDLER_URL_PROD }}" >> $GITHUB_ENV
      -
        name: Set rc branch tag
        if: ${{ env.BRANCH == 'release-candidate' }}
        run: |
          echo "ENV_TAG=tnet" >> $GITHUB_ENV
          echo "UTILS_HANDLER_URL=${{ secrets.UTILS_HANDLER_URL_TNET }}" >> $GITHUB_ENV
      -
        name: Set develop branch tag
        if: ${{ env.BRANCH == 'develop' || env.ENV_TAG == '' }}
        run: |
          echo "ENV_TAG=dev" >> $GITHUB_ENV
          echo "UTILS_HANDLER_URL=${{ secrets.UTILS_HANDLER_URL_DEV }}" >> $GITHUB_ENV
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      -
        name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Build, test and push
        env:
          IMAGE_ID_1: "ceramicnetwork/go-ipfs-daemon"
          IMAGE_ID_2: "${{ steps.login-ecr.outputs.registry }}/go-ipfs-${{ env.ENV_TAG }}"
        run: |
          EXTRA_TAGS=""
          if [[ "${{ env.ENV_TAG }}" == "prod" ]]; then
            EXTRA_TAGS="--tag $IMAGE_ID_1:latest --tag $IMAGE_ID_2:latest"
          fi
          docker buildx build -o type=docker . --file Dockerfile \
            --tag go-ipfs-daemon \
            --tag $IMAGE_ID_1:${{ env.ENV_TAG }} \
            --tag $IMAGE_ID_1:${{ github.sha }}  \
            --tag $IMAGE_ID_1:${{ env.BRANCH }}  \
            --tag $IMAGE_ID_2:${{ env.ENV_TAG }} \
            --tag $IMAGE_ID_2:${{ github.sha }}  \
            --tag $IMAGE_ID_2:${{ env.BRANCH }}  \
            $EXTRA_TAGS
          docker run go-ipfs-daemon dag stat /ipfs/QmUNLLsPACCz1vLxQVkXqqLX5R1X345qqfHbsf67hvA3Nn || exit 1
          docker push --all-tags $IMAGE_ID_1
          docker push --all-tags $IMAGE_ID_2
       -
         name: Publish build event
         run: |
           res=$(docker run --rm curlimages/curl curl -X POST ${{ env.UTILS_HANDLER_URL }}/github/event \
             -H "Content-Type: application/json" \
             --user ${{ secrets.AWS_ACCESS_KEY_ID }}:${{ secrets.AWS_SECRET_ACCESS_KEY }} \
             --aws-sigv4 "aws:amz:${{ secrets.AWS_DEFAULT_REGION }}:execute-api" \
             -d '
               {
                 "event_type": "new_ipfs_image",
                 "client_payload":
                 {
                   "env_tag": "${{ env.ENV_TAG }}",
                   "sha_tag": "${{ github.sha }}",
                   "ecr_repo": "${{ steps.login-ecr.outputs.registry }}",
                   "attempt": "${{ github.run_attempt }}",
                   "image_name": "go-ipfs-${{ env.ENV_TAG }}"
                 }
               }
             ') || exit 1
           echo $res
           if [[ $res != *"Forwarded event"* ]]; then
             exit 1
           fi
